q()
library(gamlr)
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
y <- 4 + 3*x[,1] + -1*x[,2] + rnorm(n)
ptm <- proc.time()
fitlasso <- gamlr(x, y, gamma=0, lambda.min.ratio=1e-3, verb = TRUE) # lasso
# Stop the clock
proc.time() - ptm
ptm <- proc.time()
fitlasso <- gamlr(x, y, gamma=0, lambda.min.ratio=1e-3, verb = TRUE) # lasso
# Stop the clock
proc.time() - ptm
fitgl$gamma
fitlasso <- gamlr(x, y, gamma=0, lambda.min.ratio=1e-3, verb = TRUE) # lasso
fitgl <- gamlr(x, y, gamma=2, lambda.min.ratio=1e-3) # small gamma
fitglbv <- gamlr(x, y, gamma=10, lambda.min.ratio=1e-3) # big gamma
par(mfrow=c(1,3))
ylim = range(c(fitglbv$beta@x))
plot(fitlasso, ylim=ylim, col="navy")
plot(fitgl, ylim=ylim, col="maroon")
plot(fitglbv, ylim=ylim, col="darkorange")
data = cbind(y, x)
write.table(data,file = "/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_data.csv",sep=",",row.names=FALSE,col.names=FALSE)
fitgl$gamma
for(fitname in c("fitlasso", "fitgl", "fitglbv")) {
fit <- eval(parse(text=fitname))
fittable <- data.frame(fit$lambda,fit$df,fit$deviance,fit$alpha,fitgl$gamma)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".csv")
write.table(fittable,file =filename ,sep=",",row.names=FALSE)
coefs <- as.matrix(fit$beta)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".coefs",".csv")
write.table(coefs,file =filename ,sep=",",row.names=FALSE,col.names=FALSE)
}
for(fitname in c("fitlasso", "fitgl", "fitglbv")) {
fit <- eval(parse(text=fitname))
fittable <- data.frame(fit$lambda,fit$df,fit$deviance,fit$alpha)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".csv")
write.table(fittable,file =filename ,sep=",",row.names=FALSE)
coefs <- as.matrix(fit$beta)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".coefs",".csv")
write.table(coefs,file =filename ,sep=",",row.names=FALSE,col.names=FALSE)
params <- data.frame(fit$gamma,fit$family)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".params.csv")
write.table(params,file =filename ,sep=",",row.names=FALSE)
}
set.seed(13)
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
y <- 4 + 3*x[,1] + -1*x[,2] + rnorm(n)
set.seed(13)
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
y <- 4 + 3*x[,1] + -1*x[,2] + rnorm(n)
set.seed(13)
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
y <- 4 + 3*x[,1] + -1*x[,2] + rnorm(n)
## run models to extra small lambda 1e-3xlambda.start
# Start the clock!
fitlasso <- gamlr(x, y, gamma=0, lambda.min.ratio=1e-3) # lasso
fitgl <- gamlr(x, y, gamma=2, lambda.min.ratio=1e-3) # small gamma
fitglbv <- gamlr(x, y, gamma=10, lambda.min.ratio=1e-3) # big gamma
par(mfrow=c(1,3))
ylim = range(c(fitglbv$beta@x))
plot(fitlasso, ylim=ylim, col="navy")
plot(fitgl, ylim=ylim, col="maroon")
plot(fitglbv, ylim=ylim, col="darkorange")
# export test data
data = cbind(y, x)
write.table(data,file = "/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_data.csv",sep=",",row.names=FALSE,col.names=FALSE)
# export estimates
for(fitname in c("fitlasso", "fitgl", "fitglbv")) {
fit <- eval(parse(text=fitname))
fittable <- data.frame(fit$lambda,fit$df,fit$deviance,fit$alpha)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".csv")
write.table(fittable,file =filename ,sep=",",row.names=FALSE)
coefs <- as.matrix(fit$beta)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".coefs",".csv")
write.table(coefs,file =filename ,sep=",",row.names=FALSE,col.names=FALSE)
params <- data.frame(fit$gamma,fit$family)
filename <- paste0("/home/amanela/.julia/v0.4/Lasso/test/data/gamlr_",fitname,".params.csv")
write.table(params,file =filename ,sep=",",row.names=FALSE)
}
data = cbind(y, x)
write.table(data,file = "~/.julia/v0.4/Lasso/test/data/gamlr_data.csv",sep=",",row.names=FALSE,col.names=FALSE)
# creates test data for GammaLassoPath
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
families <- c("gaussian","binomial","poisson")
family <- families[1]
utils::str(make.link("logit"))
glmlink <- make.link("logit")
glmlink <- make.link("gaussian")
binomial(link="logit")
family(binomial(link="logit"))
binomial(link="logit")
family <- binomial(link="logit")
families <- c(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
family <- families[1]
families <- c(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- c(gaussian(link="identity");binomial(link="logit");poisson(link = "log"))
families <- (gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- cbind(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- c(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
family <- families[1]
families <- vc(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- vcat(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- as.vector(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
families <- list(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
family <- families[1]
family$linkinv(2)
family$linkinv
invlink <- family$linkinv
family <- families[1]
family <- families[1,1]
family <- families[1,:]
family <- families[1][1]
family <- families[1][]
family <- families[1]
invlink <- family$family
invlink <- family@family
invlink <- family$family
families <- list(gaussian(link="identity"),binomial(link="logit"),poisson(link = "log"))
family <- families[1]
names(family)
filednames(family)
family[1]
family <- families[[1]]
invlink <- family$linkinv
invlink(3)
Ey <- 4 + 3*x[,1] + -1*x[,2]
y <- Ey + rnorm(n)
yp <- vector(0.0 ,length=n)
yp <- rep(0.0,n)
randfuns <- list(rnorm,rbinom,rpois)
warnings()
randfun <- randfuns[1]
randfun <- randfuns[[1]]
yp <- rep(0.0,n)
for(i in 1:n) {
yp[i] = randfun(m,invlink(Ey[i]))
}
rbinom1 <- function(n,p) {rbinom(n,1,p)}
rbinom1(5,0.3)
rbinom1(500000,0.3)
mean(rbinom1(500000,0.3))
mean(rbinom(500000,1,0.3))
yp <- randfun(n,invlink(Ey))
mean(yp)
source('~/.julia/v0.4/Lasso/test/gammalasso.R')
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
clear
library(gamlr)
set.seed(13)
n <- 1000
p <- 3
xvar <- matrix(0.9, nrow=p,ncol=p)
diag(xvar) <- 1
x <- matrix(rnorm(p*n), nrow=n)%*%chol(xvar)
Ey <- 4 + 3*x[,1] + -1*x[,2]
y <- Ey + rnorm(n)
rbinom1 <- function(n,p) {rbinom(n,1,p)}
families <- list(gaussian(link="identity"),binomial(link="logit"),poisson(link="log"))
randfuns <- list(rnorm,rbinom1,rpois)
for(f in 1:1) {
family <- families[[f]]
randfun <- randfuns[[f]]
invlink <- family$linkinv
yp <- randfun(n,invlink(Ey))
## run models to extra small lambda 1e-3xlambda.start
fitlasso <- gamlr(x, yp, gamma=0, lambda.min.ratio=1e-3, family=family$family) # lasso
fitgl <- gamlr(x, yp, gamma=2, lambda.min.ratio=1e-3, family=family$family) # small gamma
fitglbv <- gamlr(x, yp, gamma=10, lambda.min.ratio=1e-3, family=family$family) # big gamma
#   par(mfrow=c(1,3))
#   ylim = range(c(fitglbv$beta@x))
#   plot(fitlasso, ylim=ylim, col="navy")
#   plot(fitgl, ylim=ylim, col="maroon")
#   plot(fitglbv, ylim=ylim, col="darkorange")
# export test data
data = cbind(yp, x)
familyfilename <- paste0("~/.julia/v0.4/Lasso/test/data/gamlr.",family$family)
print(basefilename)
write.table(data,file = paste0(familyfilename,".data.csv"), sep=",",row.names=FALSE,col.names=FALSE)
# export estimates
for(fitname in c("fitlasso", "fitgl", "fitglbv")) {
fit <- eval(parse(text=fitname))
fitfilename <- paste0(familyfilename,".",fitname)
fittable <- data.frame(fit$lambda,fit$df,fit$deviance,fit$alpha)
write.table(fittable,file = paste0(fitfilename,".fit.csv") ,sep=",",row.names=FALSE)
coefs <- as.matrix(fit$beta)
write.table(coefs,file = paste0(fitfilename,".coefs.csv") ,sep=",",row.names=FALSE,col.names=FALSE)
params <- data.frame(fit$gamma,fit$family)
write.table(params,file = paste0(fitfilename,".params.csv") ,sep=",",row.names=FALSE)
}
}
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
source('~/.julia/v0.4/Lasso/test/gammalasso.R', echo=TRUE)
load("/home/amanela/Dropbox/workspace/Text/code/textir/data/we8there.rda")
save.image("~/Dropbox/workspace/HurdleDMR/data/we8there_linux.RData")
View(we8thereRatings)
library(textir)
data(we8there)
data(we8there)
save.image(file="/home/amanela/Dropbox/workspace/HurdleDMR/data/we8there_linux.RData")
save.image(file="/home/amanela/Dropbox/workspace/HurdleDMR/data/we8there_linux_v1.RData",version=1)
we8thereCounts<-as.Matrix(we8thereCounts)
library(Matrix)
we8thereCounts<-as.Matrix(we8thereCounts)
we8thereCounts<-as.matrix(we8thereCounts)
save.image(file="/home/amanela/Dropbox/workspace/HurdleDMR/data/we8there_linux.RData")
data(we8there)
library(textir)
library(Matrix)
data(we8there)
we8thereCounts$Terms
we8thereCounts$Dimnames
we8thereCounts@Dimnames
we8thereCounts@Dimnames@Docs
we8thereCounts@Dimnames$Docs
data(we8there)
cl <- makeCluster(detectCores(), type="FORK")
fits <- mnlm(cl, we8thereRatings[,'Overall',drop=FALSE],
we8thereCounts, bins=5, gamma=1, nlambda=10)
stopCluster(cl)
terms <- c("first date","chicken wing",
"ate here", "good food",
"food fabul","terribl servic")
par(mfrow=c(3,2))
for(j in terms)
{ 	plot(fits[[j]]); mtext(j,font=2,line=2) }
fits <- mnlm(cl, we8thereRatings[,'Overall',drop=FALSE],
we8thereCounts, bins=NULL, gamma=1, nlambda=10)
cl <- makeCluster(detectCores(), type="FORK")
## small nlambda for a fast example
fits <- mnlm(cl, we8thereRatings[,'Overall',drop=FALSE],
we8thereCounts, bins=NULL, gamma=1, nlambda=10)
stopCluster(cl)
## plot fits for a few individual terms
terms <- c("first date","chicken wing",
"ate here", "good food",
"food fabul","terribl servic")
par(mfrow=c(3,2))
for(j in terms)
{ 	plot(fits[[j]]); mtext(j,font=2,line=2) }
B <- coef(fits)
cl <- makeCluster(detectCores(), type="FORK")
fits <- mnlm(cl, we8thereRatings[,'Overall',drop=FALSE],
we8thereCounts, bins=5, gamma=1, nlambda=10)
fits_binless <- mnlm(cl, we8thereRatings[,'Overall',drop=FALSE],
we8thereCounts, bins=NULL, gamma=1, nlambda=10)
stopCluster(cl)
## plot fits for a few individual terms
terms <- c("first date","chicken wing",
"ate here", "good food",
"food fabul","terribl servic")
par(mfrow=c(3,2))
for(j in terms)
{ 	plot(fits[[j]]); mtext(j,font=2,line=2) }
## extract coefficients
B <- coef(fits)
B_binless <- coef(fits_binless)
B
dim(B)
dim(B_binless)
cbind(B,B_binless)
A <- cbind(B,B_binless)
A <- as.matrix(cbind(B,B_binless))
View(A)
A <- as.matrix(cbind(t(B),t(B_binless)))
View(A)
install.packages("VGAM")
install.packages("hdm")
install.packages("devtools") #if not already installed
install.packages("curl")
install.packages("curl")
install.packages("httr")
devtools::install_github("armgong/rjulia", ref="julia0.5")# or ref="julia0.4" if using Julia v0.5
install.packages("devtools") #if not already installed
devtools::install_github("armgong/rjulia", ref="julia0.5")# or ref="julia0.4" if using Julia v0.5
library(rjulia)
julia_init() #**(will auto find your julia home)**
julia_init() #**(will auto find your julia home)**
julia_eval("1+1")
cd("~/Dropbox/KellyManelaMoreira/HurdleDMR/")
wd("~/Dropbox/KellyManelaMoreira/HurdleDMR/")
?cd
?wd
wd(path="~/Dropbox/KellyManelaMoreira/HurdleDMR/")
debtools::wd(path="~/Dropbox/KellyManelaMoreira/HurdleDMR/")
devtools::wd(path="~/Dropbox/KellyManelaMoreira/HurdleDMR/")
devtools::wd(pkg=".",path="~/Dropbox/KellyManelaMoreira/HurdleDMR/")
setwd("~/Dropbox/KellyManelaMoreira/HurdleDMR/")
jloaddf()
julia_eval("include(\"test/hurdle.jl\")")
julia_eval("include(\"src/HurdleDMR.jl\")")
julia_eval_null("include(\"src/HurdleDMR.jl\")")
julia_void_eval("include(\"src/HurdleDMR.jl\")")
julia_void_eval('include("src/HurdleDMR.jl")')
